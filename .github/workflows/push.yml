name: Test_Workflow
on: 
  push:
    branches:
      - new_branch
jobs:
  Test_job:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - 
        name: Check out repository code
        uses: actions/checkout@v4
      - 
        name: Fetching GO version from repo
        run: echo "GO_VERSION=$(cat .go-version)" >> $GITHUB_ENV
      - 
        name: Setup GO environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - 
        name: Create Release Info
        run: |
          echo "SDK_VERSION=$(cat .sdk-version)" >> $GITHUB_ENV
          echo "CURRENT_TIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "COMMIT_ID=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      - 
        run: echo "RELEASE_VERSION=${{ env.SDK_VERSION }}-${{ env.CURRENT_TIME }}-${{ env.COMMIT_ID }}" >> $GITHUB_ENV
      -
        name: Validate Release Version
        run: |
          OLD_RELEASE_VERSION=$(git ls-remote --tags | cut -d/ -f3- | cut -d- -f1 | tail -1)
          echo "$OLD_RELEASE_VERSION"
      -
        name: Update release version using go generate
        run: go generate ./internal/version
      - 
        name: Setup git config for creating Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "<>"
      - 
        name: Update sdk version and create Tag
        run: |
          git add internal/version/version_generated.go
          git commit -m "version updated"
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}
      - 
        name: Create Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false